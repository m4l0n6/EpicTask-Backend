const mongoose = require('mongoose');
require('dotenv').config(); // Kh√¥ng ch·ªâ ƒë·ªãnh path, ƒë·ªÉ t·ª± ƒë·ªông t√¨m trong th∆∞ m·ª•c g·ªëc

// K·∫øt n·ªëi ƒë·∫øn MongoDB s·ª≠ d·ª•ng URI t·ª´ file .env
const MONGO_URI = process.env.MONGO_URI;
if (!MONGO_URI) {
  console.error('‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng MONGO_URI ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t.');
  process.exit(1);
}

// Import User model
const User = require('../models/User');

async function runMigration() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi t·ªõi MongoDB...');
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng. B·∫Øt ƒë·∫ßu migration...');
    
    // ƒê·∫øm s·ªë l∆∞·ª£ng user kh√¥ng c√≥ tr∆∞·ªùng tokens
    const usersWithoutTokens = await User.countDocuments({
      tokens: { $exists: false }
    });
    
    console.log(`T√¨m th·∫•y ${usersWithoutTokens} user kh√¥ng c√≥ tr∆∞·ªùng tokens`);
    
    if (usersWithoutTokens > 0) {
      // C·∫≠p nh·∫≠t t·∫•t c·∫£ user ch∆∞a c√≥ tr∆∞·ªùng tokens
      const result = await User.updateMany(
        { tokens: { $exists: false } },
        { $set: { tokens: 0 } }
      );
      
      console.log(`Migration th√†nh c√¥ng! ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} user.`);
    } else {
      console.log('T·∫•t c·∫£ user ƒë√£ c√≥ tr∆∞·ªùng tokens. Kh√¥ng c·∫ßn th·ª±c hi·ªán migration.');
    }
  } catch (error) {
    console.error('L·ªói trong qu√° tr√¨nh migration:', error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi MongoDB sau khi ho√†n t·∫•t
    await mongoose.connection.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB.');
  }
}

// Ch·∫°y migration
runMigration();